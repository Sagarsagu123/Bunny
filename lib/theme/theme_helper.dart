import 'package:flutter/material.dart';
import 'package:flutter_demo/core/utils/pref_utils.dart';
import 'package:flutter_demo/core/utils/size_utils.dart';
import 'package:get/get.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    PrefUtils().setThemeData(newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              5,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray60001,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            22,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            25,
          ),
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w500,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    background: Color(0XFF641696),
    error: Color(0XFF641696),
    errorContainer: Color(0XFFE3B083),
    inversePrimary: Color(0XFF641696),
    inverseSurface: Color(0XFF641696),
    onBackground: Color(0X75FFFFFF),
    onError: Color(0X75FFFFFF),
    onErrorContainer: Color(0XFF641696),
    onInverseSurface: Color(0X75FFFFFF),
    onPrimary: Color(0XFF641696),
    onPrimaryContainer: Color(0X75FFFFFF),
    onSecondary: Color(0X75FFFFFF),
    onSecondaryContainer: Color(0XFF641696),
    onSurface: Color(0X75FFFFFF),
    onSurfaceVariant: Color(0XFF641696),
    onTertiary: Color(0X75FFFFFF),
    onTertiaryContainer: Color(0XFF641696),
    outline: Color(0XFF641696),
    outlineVariant: Color(0XFF641696),
    primary: Color(0XFFAF6CDA),
    primaryContainer: Color(0XFF641696),
    scrim: Color(0XFF641696),
    secondary: Color(0XFF641696),
    secondaryContainer: Color(0XFFE3B083),
    shadow: Color(0XFF641696),
    surface: Color(0XFF641696),
    surfaceTint: Color(0XFF641696),
    surfaceVariant: Color(0XFFE3B083),
    tertiary: Color(0XFF641696),
    tertiaryContainer: Color(0XFFE3B083),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);
  // Blue
  Color get blue100 => const Color(0XFFC7EBFF);
  Color get blue200 => const Color(0XFF9BDAFF);
  // BlueGray
  Color get blueGray100 => const Color(0XFFD1D3D9);
  Color get blueGray10001 => const Color(0XFFD9D9D9);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray50 => const Color(0XFFECEDF1);
  // DeepOrange
  Color get deepOrange300 => const Color(0XFFED7F62);
  // DeepPurple
  Color get deepPurple300 => const Color(0XFF7B6BDA);
  Color get deepPurple30001 => const Color(0XFF816DDB);
  // Gray
  Color get gray100 => const Color(0XFFF3F3F3);
  Color get gray600 => const Color(0XFF978061);
  Color get gray60001 => const Color(0XFF6B6B6B);
  // Indigo
  Color get indigo300 => const Color(0XFF7A6BDA);
  Color get indigo600 => const Color(0XFF425B91);
  // LightBlue
  Color get lightBlue200 => const Color(0XFF75CDFF);
  // LightGreen
  Color get lightGreen400 => const Color(0XFFB3CC57);
  // Lime
  Color get lime900 => const Color(0XFF745200);
  // Red
  Color get red400 => const Color(0XFFF44C4E);
  Color get red40001 => const Color(0XFFED6161);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
